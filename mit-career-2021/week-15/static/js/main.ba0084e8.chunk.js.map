{"version":3,"sources":["Balance/index.js","ATMInput/index.js","App.js","index.js"],"names":["Balance","name","balance","isPinEntered","operation","onSetOperation","enterPin","Alert","variant","showOperationSelection","Button","className","onClick","showBalance","console","log","ATMInput","onEnter","onRemove","onButtonPressed","isOperationSet","undefined","Form","Group","controlId","Control","id","type","placeholder","OPERATIONS","App","useState","pin","setPin","setName","setBalance","setOperation","useEffect","n","window","prompt","text","document","getElementById","value","alert","updateBalance","amount","prevBalance","Container","Row","Card","Body","operationIndex","e","userInput","textLength","length","substring","target","innerText","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ba0084e8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Alert, Button } from \"react-bootstrap\";\n\nconst Balance = ({\n  name,\n  balance,\n  isPinEntered,\n  operation,\n  onSetOperation,\n}) => {\n  const enterPin = (\n    <Alert variant=\"light\">\n      <h3>Enter your PIN, {name}</h3>\n      <i>Note: For the purpose of this demo, use 1234</i>\n    </Alert>\n  );\n\n  const showOperationSelection = (\n    <Alert variant=\"light\">\n      <Button\n        className=\"keyboard-button\"\n        variant=\"success\"\n        onClick={() => onSetOperation(0)}\n      >\n        Deposit\n      </Button>\n      <Button\n        className=\"keyboard-button\"\n        variant=\"secondary\"\n        onClick={() => onSetOperation(1)}\n      >\n        Cash Back\n      </Button>\n    </Alert>\n  );\n\n  const showBalance = (\n    <Alert variant=\"light\">\n      <h3>\n        {name}, your balance is: $ {balance}\n      </h3>\n      <Button variant=\"secondary\" onClick={() => onSetOperation(2)}>\n        Operation: {operation} - Back to Select Operation\n      </Button>\n    </Alert>\n  );\n\n  console.log(isPinEntered);\n  console.log(operation);\n\n  return (\n    <>\n      {!isPinEntered && enterPin}\n      {isPinEntered && !operation && showOperationSelection}\n      {isPinEntered && operation && showBalance}\n    </>\n  );\n};\n\nexport default Balance;\n","import React from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\n\nconst ATMInput = ({\n  isPinEntered,\n  operation,\n  onEnter,\n  onRemove,\n  onButtonPressed,\n}) => {\n  const isOperationSet = operation !== \"\" && operation !== undefined;\n  return (\n    <>\n      {(!isPinEntered || isOperationSet) && (\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"formAmount\">\n            {isPinEntered && (\n              <Form.Control\n                id=\"userInput\"\n                type=\"number\"\n                placeholder=\"Use the keyboard below\"\n              />\n            )}\n            {!isPinEntered && (\n              <input\n                id=\"userInput\"\n                type=\"password\"\n                className=\"form-control\"\n                placeholder=\"Use the keyboard below\"\n              />\n            )}\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"formKeyboard\">\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              1\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              2\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              3\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              4\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              5\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              6\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              7\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              8\n            </Button>\n            <Button\n              className=\"keyboard-button\"\n              variant=\"primary\"\n              onClick={onButtonPressed}\n            >\n              9\n            </Button>\n\n            <Button\n              className=\"keyboard-button\"\n              variant=\"success\"\n              onClick={onEnter}\n            >\n              Enter\n            </Button>\n\n            <Button\n              className=\"keyboard-button\"\n              variant=\"danger\"\n              onClick={onRemove}\n            >\n              Remove\n            </Button>\n          </Form.Group>\n        </Form>\n      )}\n      {isPinEntered && !isOperationSet && (\n        <h4>Please select the action you want to perform</h4>\n      )}\n    </>\n  );\n};\n\nexport default ATMInput;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Card } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Balance from \"./Balance\";\nimport ATMInput from \"./ATMInput\";\n\nconst OPERATIONS = [\"DEPOSIT\", \"CASH BACK\", \"\"];\n\nfunction App() {\n  const [pin, setPin] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [operation, setOperation] = useState(\"\");\n\n  useEffect(() => {\n    let n = \"\";\n    while (n === \"\") {\n      n = window.prompt(\"Hello! Enter your name. It's required\");\n    }\n    setName(n);\n  }, []);\n\n  const isPinEntered = () => {\n    return pin === \"1234\";\n  };\n\n  const handleOnEnter = (e) => {\n    if (!isPinEntered()) {\n      enterPin();\n    } else {\n      updateBalance();\n    }\n  };\n\n  const handleOnRemove = (e) => {\n    const userInput = document.getElementById(\"userInput\");\n    const textLength = userInput.value.length;\n    if (textLength > 0) {\n      console.log(userInput.value.substring(0, textLength - 1));\n      userInput.value = userInput.value.substring(0, textLength - 1);\n    }\n  };\n\n  const handleOnButtonPressed = (e) => {\n    document.getElementById(\"userInput\").value += +e.target.innerText;\n  };\n\n  const handleOnSetOperation = (operationIndex) => {\n    setOperation(OPERATIONS[operationIndex]);\n  };\n\n  const enterPin = () => {\n    const text = document.getElementById(\"userInput\").value;\n    if (text !== \"1234\") {\n      alert(\"Incorrect PIN\");\n      return;\n    }\n    setPin(text);\n  };\n\n  const updateBalance = () => {\n    const amount = +document.getElementById(\"userInput\").value;\n    if (operation === OPERATIONS[0]) {\n      setBalance((prevBalance) => prevBalance + amount);\n      document.getElementById(\"userInput\").value = \"\";\n    } else {\n      if (balance - amount >= 0) {\n        setBalance((prevBalance) => prevBalance - amount);\n        document.getElementById(\"userInput\").value = \"\";\n      } else {\n        alert(\"Your amount exceeds your limit. Try with a lower amount\");\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Card>\n          <Card.Body>\n            <Balance\n              isPinEntered={isPinEntered()}\n              name={name}\n              balance={balance}\n              operation={operation}\n              onSetOperation={handleOnSetOperation}\n            />\n          </Card.Body>\n        </Card>\n        <Card>\n          <Card.Body>\n            <ATMInput\n              isPinEntered={isPinEntered()}\n              operation={operation}\n              onEnter={handleOnEnter}\n              onRemove={handleOnRemove}\n              onButtonPressed={handleOnButtonPressed}\n            />\n          </Card.Body>\n        </Card>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}